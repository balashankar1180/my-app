onclick="getAlert()"

style="border:dashed;border-color: blue;"
import { FormsModule } from '@angular/forms';

name = new FormControl(''); // Single Form Control
 updateName()
  {
  this.name.setValue('Nancy');
  }

  <span class="help-block" *ngIf="((accountForm.get('fname').touched || accountForm.get('fname').dirty) && accountForm.get('fname').errors)">
<span *ngIf="accountForm.get('fname').errors.required" style="color:red">first name is required</span>
<span *ngIf="accountForm.get('fname').errors.minlength" style="color:red">first name should be NOT less than 10 character's</span>
</span>

  console.log((<FormArray>this.userForm.get("skills")).controls); // To log skills array controls to console

(*) How to Generate a new FormControl :-
Syntax :- name = new FormControl('');
Description :- Use the constructor of FormControl to set its initial value, which in this case is an empty string.
By creating these controls in your component class, you get immediate access to listen for, update, and validate the state of the form input.

(*) Register the control in the template :-
Description :- After you create the control in the component class, you must associate it with a form control element in the template. Update the template with the form control using the formControl binding provided by FormControlDirective, which is also included in the ReactiveFormsModule.
Using the template binding syntax, the form control is now registered to the name input element in the template. The form control and DOM element communicate with each other
Template :-
-------------------------------------------------
<label for="name">Name: </label>
<input id="name" type="text" [formControl]="name">
-------------------------------------------------

(*) Displaying a form control value :-
Description :- With the value property, which gives you a snapshot of the current value.
The displayed value changes as you update the form control element.
Template :-
-------------------------------------------------
<p>Name is : {{name.value}}</p>
-------------------------------------------------

(*) FormGroup Get Value :-
FormGroup is a collection of form controls. So, we can get the value of the form control name using the following method.
-------------------------------------------------
this.mandoForm.get('name').value
-------------------------------------------------
To log all form controls to console:
-------------------------------------------------
onSubmit(): void
{
 console.log('Name:' + this.mandoForm.get('name').value);
 console.log('Series:' + this.mandoForm.get('series').value);
}
-------------------------------------------------






Boilerplate Code : Boilerplate code means a piece of code which can be used over and over again. On the other hand, anyone can say that it's a piece of reusable code.














More Info : https://angular.io/guide/reactive-forms